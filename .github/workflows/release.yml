name: Release

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

permissions:
  contents: read

jobs:
  guard:
    name: Check CI success and tag
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      sha: ${{ steps.get_sha.outputs.sha }}
      tag: ${{ steps.check_tag.outputs.tag }}
      has_tag: ${{ steps.check_tag.outputs.has_tag }}
    steps:
      - name: Extract SHA
        id: get_sha
        run: echo "sha=${{ github.event.workflow_run.head_sha }}" >> "$GITHUB_OUTPUT"

      - name: Check for release tag on SHA
        id: check_tag
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const sha = `${{ github.event.workflow_run.head_sha }}`;
            const tags = await github.paginate(github.rest.repos.listTags, { owner, repo, per_page: 100 });
            // Only allow clean SemVer tags without local/pre-release suffixes for PyPI (e.g., v1.2.3)
            const match = tags.find(
              t => t.commit && t.commit.sha === sha && /^v\d+\.\d+\.\d+$/.test(t.name)
            );
            core.setOutput('has_tag', match ? 'true' : 'false');
            core.setOutput('tag', match ? match.name : '');

  build:
    needs: guard
    if: ${{ needs.guard.outputs.has_tag == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout release ref
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.guard.outputs.tag }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[build]"

      - name: Fetch tags for versioning
        run: git fetch --tags --force --prune --unshallow || git fetch --tags --force --prune

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}